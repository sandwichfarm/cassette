name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        type: string
        required: true
        default: 'v0.1.0'
        description: 'Tag for the release'
        

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    name: Build - ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: cassette
            archive: tar.gz

          - name: Linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin: cassette
            archive: tar.gz

          - name: Linux-x86_64-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            bin: cassette
            archive: tar.gz

          - name: macOS-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            bin: cassette
            archive: tar.gz

          - name: macOS-aarch64
            os: macos-latest
            target: aarch64-apple-darwin
            bin: cassette
            archive: tar.gz

          # Temporarily disabled due to duplicate wasmtime symbol linking errors
          # - name: Windows-x86_64
          #   os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   bin: cassette.exe
          #   archive: zip

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install cross-compilation tools
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Set up cross-compilation environment
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Install MUSL toolchain (Linux musl)
        if: matrix.platform.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Prepare Cargo.toml (non-Windows)
        if: runner.os != 'Windows'
        run: |
          cd cli
          cp Cargo.toml Cargo.toml.bak
          # Remove the [lib] section and its content
          awk '
            BEGIN { in_lib = 0 }
            /^\[lib\]/ { in_lib = 1; next }
            /^\[/ && in_lib { in_lib = 0 }
            !in_lib { print }
          ' Cargo.toml.bak > Cargo.toml

      - name: Prepare Cargo.toml (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd cli
          Copy-Item Cargo.toml Cargo.toml.bak
          # Remove the [lib] section using PowerShell
          $content = Get-Content Cargo.toml.bak
          $output = @()
          $inLib = $false
          foreach ($line in $content) {
            if ($line -match '^\[lib\]') {
              $inLib = $true
            } elseif ($line -match '^\[' -and $inLib) {
              $inLib = $false
              $output += $line
            } elseif (-not $inLib) {
              $output += $line
            }
          }
          $output | Set-Content Cargo.toml

      - name: Build binary
        run: |
          cd cli
          cargo build --release --target ${{ matrix.platform.target }} --bin cassette
          cd ..

      - name: Smoke test binary (Linux x86_64 and macOS)
        if: matrix.platform.target == 'x86_64-unknown-linux-gnu' || matrix.platform.target == 'x86_64-apple-darwin' || matrix.platform.target == 'x86_64-unknown-linux-musl'
        run: |
          ./cli/target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }} --version

      - name: Restore Cargo.toml (non-Windows)
        if: runner.os != 'Windows'
        run: |
          cd cli
          mv -f Cargo.toml.bak Cargo.toml

      - name: Restore Cargo.toml (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd cli
          Move-Item -Path Cargo.toml.bak -Destination Cargo.toml -Force
          
      - name: Package as archive
        shell: bash
        run: |
          cd cli/target/${{ matrix.platform.target }}/release
          if [[ "${{ matrix.platform.archive }}" == "tar.gz" ]]; then
            tar czvf ../../../../cassette-${{ matrix.platform.name }}.tar.gz ${{ matrix.platform.bin }}
          else
            7z a ../../../../cassette-${{ matrix.platform.name }}.zip ${{ matrix.platform.bin }}
          fi
          cd -

      - name: Generate SHA-256
        run: shasum -a 256 cassette-${{ matrix.platform.name }}.${{ matrix.platform.archive }} > cassette-${{ matrix.platform.name }}.${{ matrix.platform.archive }}.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cassette-${{ matrix.platform.name }}
          path: |
            cassette-${{ matrix.platform.name }}.${{ matrix.platform.archive }}
            cassette-${{ matrix.platform.name }}.${{ matrix.platform.archive }}.sha256

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Generate release notes
        id: release_notes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          cat > release_notes.md << EOF
          ## Installation

          Download the appropriate binary for your platform below.

          ### Quick Install

          #### macOS (Intel or Apple Silicon)
          \`\`\`bash
          curl -L https://github.com/dskvr/cassette/releases/download/$VERSION/cassette-macOS-$(uname -m | sed 's/x86_64/x86_64/;s/arm64/aarch64/').tar.gz | tar xz
          chmod +x cassette
          sudo mv cassette /usr/local/bin/
          \`\`\`

          #### Linux (x86_64)
          \`\`\`bash
          curl -L https://github.com/dskvr/cassette/releases/download/$VERSION/cassette-Linux-x86_64.tar.gz | tar xz
          chmod +x cassette
          sudo mv cassette /usr/local/bin/
          \`\`\`

          #### Windows
          Download the Windows zip file below and add \`cassette.exe\` to your PATH.

          ### Verify Installation
          \`\`\`bash
          cassette --version
          \`\`\`

          ### Checksums
          SHA-256 checksums are provided for each download. Verify with:
          \`\`\`bash
          shasum -a 256 -c cassette-<platform>.tar.gz.sha256
          \`\`\`
          EOF

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_notes.outputs.VERSION }}
          name: Cassette ${{ steps.release_notes.outputs.VERSION }}
          body_path: release_notes.md
          files: artifacts/*
          fail_on_unmatched_files: true
          generate_release_notes: true
